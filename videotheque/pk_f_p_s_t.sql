CREATE OR REPLACE FUNCTION  "ONE_REALISATEUR" (realis_id IN realisateur.idrealis%TYPE)
   RETURN realisateur%ROWTYPE
IS
    l_realisa   realisateur%ROWTYPE;
BEGIN
   SELECT *
      INTO l_realisa
      FROM realisateur
    WHERE idrealis=realis_id;

    RETURN l_realisa;
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN
       /* Return an empty record. */
       RETURN l_realisa;
END one_realisateur;
/
 

CREATE OR REPLACE PACKAGE  "ACTER_TAPI" 
IS
type ACTER_tapi_rec
IS
  record
  (
    IDACTER ACTER.IDACTER%type ,
    IDFILM ACTER.IDFILM%type ,
    NUMACTEUR ACTER.NUMACTEUR%type );
type ACTER_tapi_tab
IS
  TABLE OF ACTER_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_IDFILM    IN ACTER.IDFILM%type DEFAULT NULL ,
      p_NUMACTEUR IN ACTER.NUMACTEUR%type DEFAULT NULL );
  -- update
  PROCEDURE upd(
      p_IDACTER   IN ACTER.IDACTER%type ,
      p_IDFILM    IN ACTER.IDFILM%type DEFAULT NULL ,
      p_NUMACTEUR IN ACTER.NUMACTEUR%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_IDACTER IN ACTER.IDACTER%type );
END ACTER_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "ACTER_TAPI" 
IS
  -- insert
PROCEDURE ins(  
    p_IDFILM    IN ACTER.IDFILM%type DEFAULT NULL ,
    p_NUMACTEUR IN ACTER.NUMACTEUR%type DEFAULT NULL )
IS
BEGIN
  INSERT  INTO ACTER
    ( IDFILM ,
      NUMACTEUR
    )
    VALUES
    ( p_IDFILM ,
      p_NUMACTEUR
    );
END;
-- update
PROCEDURE upd
  (
    p_IDACTER   IN ACTER.IDACTER%type ,
    p_IDFILM    IN ACTER.IDFILM%type DEFAULT NULL ,
    p_NUMACTEUR IN ACTER.NUMACTEUR%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE ACTER
  SET IDFILM    = p_IDFILM ,
    NUMACTEUR   = p_NUMACTEUR
  WHERE IDACTER = p_IDACTER;
END;
-- del
PROCEDURE del(
    p_IDACTER IN ACTER.IDACTER%type )
IS
BEGIN
  DELETE FROM ACTER WHERE IDACTER = p_IDACTER;
END;
END ACTER_tapi;
/
 CREATE OR REPLACE PACKAGE  "ACTEUR_TAPI" 
IS
type ACTEUR_tapi_rec
IS
  record
  (
    DATENAISSANCE ACTEUR.DATENAISSANCE%type ,
    PAYS ACTEUR.PAYS%type ,
    NUMACTEUR ACTEUR.NUMACTEUR%type ,
    NOM_PRENOM ACTEUR.NOM_PRENOM%type );
type ACTEUR_tapi_tab
IS
  TABLE OF ACTEUR_tapi_rec;
   
  -- insert
  PROCEDURE ins(
      p_DATENAISSANCE IN ACTEUR.DATENAISSANCE%type DEFAULT NULL ,
      p_PAYS          IN ACTEUR.PAYS%type DEFAULT NULL ,
      p_NOM_PRENOM    IN ACTEUR.NOM_PRENOM%type DEFAULT NULL );
  -- update
  PROCEDURE upd(
      p_DATENAISSANCE IN ACTEUR.DATENAISSANCE%type DEFAULT NULL ,
      p_PAYS          IN ACTEUR.PAYS%type DEFAULT NULL ,
      p_NUMACTEUR     IN ACTEUR.NUMACTEUR%type ,
      p_NOM_PRENOM    IN ACTEUR.NOM_PRENOM%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_NUMACTEUR IN ACTEUR.NUMACTEUR%type );
END ACTEUR_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "ACTEUR_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_DATENAISSANCE IN ACTEUR.DATENAISSANCE%type DEFAULT NULL ,
    p_PAYS          IN ACTEUR.PAYS%type DEFAULT NULL  ,
    p_NOM_PRENOM    IN ACTEUR.NOM_PRENOM%type DEFAULT NULL )
IS
BEGIN
  INSERT
  INTO ACTEUR
    (
      DATENAISSANCE ,
      PAYS ,
      NOM_PRENOM
    )
    VALUES
    (
      p_DATENAISSANCE ,
      p_PAYS ,
      p_NOM_PRENOM
    );
END;
-- update
PROCEDURE upd
  (
    p_DATENAISSANCE IN ACTEUR.DATENAISSANCE%type DEFAULT NULL ,
    p_PAYS          IN ACTEUR.PAYS%type DEFAULT NULL ,
    p_NUMACTEUR     IN ACTEUR.NUMACTEUR%type ,
    p_NOM_PRENOM    IN ACTEUR.NOM_PRENOM%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE ACTEUR
  SET DATENAISSANCE = p_DATENAISSANCE ,
    PAYS            = p_PAYS ,
    NOM_PRENOM      = p_NOM_PRENOM
  WHERE NUMACTEUR   = p_NUMACTEUR;
END;
-- del
PROCEDURE del(
    p_NUMACTEUR IN ACTEUR.NUMACTEUR%type )
IS
BEGIN
  DELETE FROM ACTEUR WHERE NUMACTEUR = p_NUMACTEUR;
END;
END ACTEUR_tapi;
/
 CREATE OR REPLACE PACKAGE  "CLIENT_TAPI" 
IS
type CLIENT_tapi_rec
IS
  record
  (
    DATENAISSANCE CLIENT.DATENAISSANCE%type ,
    ADRESSE CLIENT.ADRESSE%type ,
    CIN CLIENT.CIN%type ,
    NOM_PRENOM CLIENT.NOM_PRENOM%type ,
    IDCLIENT CLIENT.IDCLIENT%type );
type CLIENT_tapi_tab
IS
  TABLE OF CLIENT_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_DATENAISSANCE IN CLIENT.DATENAISSANCE%type DEFAULT NULL ,
      p_ADRESSE       IN CLIENT.ADRESSE%type DEFAULT NULL ,
      p_CIN           IN CLIENT.CIN%type DEFAULT NULL ,
      p_NOM_PRENOM    IN CLIENT.NOM_PRENOM%type DEFAULT NULL  );
  -- update
  PROCEDURE upd(
      p_DATENAISSANCE IN CLIENT.DATENAISSANCE%type DEFAULT NULL ,
      p_ADRESSE       IN CLIENT.ADRESSE%type DEFAULT NULL ,
      p_CIN           IN CLIENT.CIN%type DEFAULT NULL ,
      p_NOM_PRENOM    IN CLIENT.NOM_PRENOM%type DEFAULT NULL ,
      p_IDCLIENT      IN CLIENT.IDCLIENT%type );
  -- delete
  PROCEDURE del(
      p_IDCLIENT IN CLIENT.IDCLIENT%type );
END CLIENT_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "CLIENT_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_DATENAISSANCE IN CLIENT.DATENAISSANCE%type DEFAULT NULL ,
    p_ADRESSE       IN CLIENT.ADRESSE%type DEFAULT NULL ,
    p_CIN           IN CLIENT.CIN%type DEFAULT NULL ,
    p_NOM_PRENOM    IN CLIENT.NOM_PRENOM%type DEFAULT NULL )
IS
BEGIN
  INSERT
  INTO CLIENT
    (
      DATENAISSANCE ,
      ADRESSE ,
      CIN ,
      NOM_PRENOM 
    )
    VALUES
    (
      p_DATENAISSANCE ,
      p_ADRESSE ,
      p_CIN ,
      p_NOM_PRENOM 
    );
END;
-- update
PROCEDURE upd
  (
    p_DATENAISSANCE IN CLIENT.DATENAISSANCE%type DEFAULT NULL ,
    p_ADRESSE       IN CLIENT.ADRESSE%type DEFAULT NULL ,
    p_CIN           IN CLIENT.CIN%type DEFAULT NULL ,
    p_NOM_PRENOM    IN CLIENT.NOM_PRENOM%type DEFAULT NULL ,
    p_IDCLIENT      IN CLIENT.IDCLIENT%type
  )
IS
BEGIN
  UPDATE CLIENT
  SET DATENAISSANCE = p_DATENAISSANCE ,
    ADRESSE         = p_ADRESSE ,
    CIN             = p_CIN ,
    NOM_PRENOM      = p_NOM_PRENOM
  WHERE IDCLIENT    = p_IDCLIENT;
END;
-- del
PROCEDURE del(
    p_IDCLIENT IN CLIENT.IDCLIENT%type )
IS
BEGIN
  DELETE FROM CLIENT WHERE IDCLIENT = p_IDCLIENT;
END;
END CLIENT_tapi;
/
 CREATE OR REPLACE PACKAGE  "EMPREINTE_TAPI" 
IS
type EMPREINTE_tapi_rec
IS
  record
  (
    DATEEMPREINTE EMPREINTE.DATEEMPREINTE%type ,
    IDXEMPLAIRE EMPREINTE.IDXEMPLAIRE%type ,
    IDPREINTE EMPREINTE.IDPREINTE%type ,
    DATERETOUR EMPREINTE.DATERETOUR%type ,
    IDCLIENT EMPREINTE.IDCLIENT%type );
type EMPREINTE_tapi_tab
IS
  TABLE OF EMPREINTE_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_DATEEMPREINTE IN EMPREINTE.DATEEMPREINTE%type DEFAULT NULL ,
      p_IDXEMPLAIRE   IN EMPREINTE.IDXEMPLAIRE%type DEFAULT NULL ,
    
      p_DATERETOUR    IN EMPREINTE.DATERETOUR%type DEFAULT NULL ,
      p_IDCLIENT      IN EMPREINTE.IDCLIENT%type DEFAULT NULL );
  -- update
  PROCEDURE upd(
      p_DATEEMPREINTE IN EMPREINTE.DATEEMPREINTE%type DEFAULT NULL ,
      p_IDXEMPLAIRE   IN EMPREINTE.IDXEMPLAIRE%type DEFAULT NULL ,
      p_IDPREINTE     IN EMPREINTE.IDPREINTE%type ,
      p_DATERETOUR    IN EMPREINTE.DATERETOUR%type DEFAULT NULL ,
      p_IDCLIENT      IN EMPREINTE.IDCLIENT%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_IDPREINTE IN EMPREINTE.IDPREINTE%type );
END EMPREINTE_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "EMPREINTE_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_DATEEMPREINTE IN EMPREINTE.DATEEMPREINTE%type DEFAULT NULL ,
    p_IDXEMPLAIRE   IN EMPREINTE.IDXEMPLAIRE%type DEFAULT NULL ,
  
    p_DATERETOUR    IN EMPREINTE.DATERETOUR%type DEFAULT NULL ,
    p_IDCLIENT      IN EMPREINTE.IDCLIENT%type DEFAULT NULL )
IS
BEGIN
  INSERT
  INTO EMPREINTE
    (
      DATEEMPREINTE ,
      IDXEMPLAIRE ,
    
      DATERETOUR ,
      IDCLIENT
    )
    VALUES
    (
      p_DATEEMPREINTE ,
      p_IDXEMPLAIRE ,
  
      p_DATERETOUR ,
      p_IDCLIENT
    );
END;
-- update
PROCEDURE upd
  (
    p_DATEEMPREINTE IN EMPREINTE.DATEEMPREINTE%type DEFAULT NULL ,
    p_IDXEMPLAIRE   IN EMPREINTE.IDXEMPLAIRE%type DEFAULT NULL ,
    p_IDPREINTE     IN EMPREINTE.IDPREINTE%type ,
    p_DATERETOUR    IN EMPREINTE.DATERETOUR%type DEFAULT NULL ,
    p_IDCLIENT      IN EMPREINTE.IDCLIENT%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE EMPREINTE
  SET DATEEMPREINTE = p_DATEEMPREINTE ,
    IDXEMPLAIRE     = p_IDXEMPLAIRE ,
    DATERETOUR      = p_DATERETOUR ,
    IDCLIENT        = p_IDCLIENT
  WHERE IDPREINTE   = p_IDPREINTE;
END;
-- del
PROCEDURE del(
    p_IDPREINTE IN EMPREINTE.IDPREINTE%type )
IS
BEGIN
  DELETE FROM EMPREINTE WHERE IDPREINTE = p_IDPREINTE;
END;
END EMPREINTE_tapi;
/
 CREATE OR REPLACE PACKAGE  "EXEMPLAIRE_TAPI" 
IS
type EXEMPLAIRE_tapi_rec
IS
  record
  (
    IDXEMPLAIRE EXEMPLAIRE.IDXEMPLAIRE%type ,
    IDFILM EXEMPLAIRE.IDFILM%type ,
    TYPESUPP EXEMPLAIRE.TYPESUPP%type );
type EXEMPLAIRE_tapi_tab
IS
  TABLE OF EXEMPLAIRE_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type ,
      p_IDFILM      IN EXEMPLAIRE.IDFILM%type DEFAULT NULL ,
      p_TYPESUPP    IN EXEMPLAIRE.TYPESUPP%type DEFAULT NULL );
  -- update
  PROCEDURE upd(
      p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type ,
      p_IDFILM      IN EXEMPLAIRE.IDFILM%type DEFAULT NULL ,
      p_TYPESUPP    IN EXEMPLAIRE.TYPESUPP%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type );
END EXEMPLAIRE_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "EXEMPLAIRE_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type ,
    p_IDFILM      IN EXEMPLAIRE.IDFILM%type DEFAULT NULL ,
    p_TYPESUPP    IN EXEMPLAIRE.TYPESUPP%type DEFAULT NULL )
IS
BEGIN
  INSERT
  INTO EXEMPLAIRE
    (
      IDXEMPLAIRE ,
      IDFILM ,
      TYPESUPP
    )
    VALUES
    (
      p_IDXEMPLAIRE ,
      p_IDFILM ,
      p_TYPESUPP
    );
END;
-- update
PROCEDURE upd
  (
    p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type ,
    p_IDFILM      IN EXEMPLAIRE.IDFILM%type DEFAULT NULL ,
    p_TYPESUPP    IN EXEMPLAIRE.TYPESUPP%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE EXEMPLAIRE
  SET IDFILM        = p_IDFILM ,
    TYPESUPP        = p_TYPESUPP
  WHERE IDXEMPLAIRE = p_IDXEMPLAIRE;
END;
-- del
PROCEDURE del(
    p_IDXEMPLAIRE IN EXEMPLAIRE.IDXEMPLAIRE%type )
IS
BEGIN
  DELETE FROM EXEMPLAIRE WHERE IDXEMPLAIRE = p_IDXEMPLAIRE;
END;
END EXEMPLAIRE_tapi;
/
 CREATE OR REPLACE PACKAGE  "FILM_TAPI" 
IS
type FILM_tapi_rec
IS
  record
  (
    ANNEREALIS FILM.ANNEREALIS%type ,
    TITRE FILM.TITRE%type ,
    GENRE FILM.GENRE%type ,
    IDFILM FILM.IDFILM%type ,
    IDREALIS FILM.IDREALIS%type );
type FILM_tapi_tab
IS
  TABLE OF FILM_tapi_rec;
  


        -- insert
  PROCEDURE ins(
      p_ANNEREALIS IN FILM.ANNEREALIS%type DEFAULT NULL ,
      p_TITRE      IN FILM.TITRE%type DEFAULT NULL ,
      p_GENRE      IN FILM.GENRE%type DEFAULT NULL ,
      p_IDREALIS   IN FILM.IDREALIS%type DEFAULT NULL );
  -- update
  PROCEDURE upd(
      p_ANNEREALIS IN FILM.ANNEREALIS%type DEFAULT NULL ,
      p_TITRE      IN FILM.TITRE%type DEFAULT NULL ,
      p_GENRE      IN FILM.GENRE%type DEFAULT NULL ,
      p_IDFILM     IN FILM.IDFILM%type ,
      p_IDREALIS   IN FILM.IDREALIS%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_IDFILM IN FILM.IDFILM%type );
END FILM_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "FILM_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_ANNEREALIS IN FILM.ANNEREALIS%type DEFAULT NULL ,
    p_TITRE      IN FILM.TITRE%type DEFAULT NULL ,
    p_GENRE      IN FILM.GENRE%type DEFAULT NULL ,
    p_IDREALIS   IN FILM.IDREALIS%type DEFAULT NULL )
IS
BEGIN
  INSERT
  INTO FILM
    (
      ANNEREALIS ,TITRE ,GENRE ,IDREALIS
    )
    VALUES
    (
      p_ANNEREALIS ,p_TITRE ,p_GENRE ,p_IDREALIS
    );
END;
-- update
PROCEDURE upd
  (
    p_ANNEREALIS IN FILM.ANNEREALIS%type DEFAULT NULL ,
    p_TITRE      IN FILM.TITRE%type DEFAULT NULL ,
    p_GENRE      IN FILM.GENRE%type DEFAULT NULL ,
    p_IDFILM     IN FILM.IDFILM%type ,
    p_IDREALIS   IN FILM.IDREALIS%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE FILM
  SET ANNEREALIS = p_ANNEREALIS ,
    TITRE        = p_TITRE ,
    GENRE        = p_GENRE ,
    IDREALIS     = p_IDREALIS
  WHERE IDFILM   = p_IDFILM;
END;
-- del
PROCEDURE del(
    p_IDFILM IN FILM.IDFILM%type )
IS
BEGIN
  DELETE FROM FILM WHERE IDFILM = p_IDFILM;
END;

END FILM_tapi;
/
 CREATE OR REPLACE PACKAGE  "PICFILM_TAPI" 
IS
type PICFILM_tapi_rec
IS
  record
  (
    PIC PICFILM.PIC%type ,
    IDPIC PICFILM.IDPIC%type ,
    IDFILM PICFILM.IDFILM%type );
type PICFILM_tapi_tab
IS
  TABLE OF PICFILM_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_PIC    IN PICFILM.PIC%type DEFAULT NULL 
   );
  -- update
  PROCEDURE upd(
      p_PIC    IN PICFILM.PIC%type DEFAULT NULL ,
      p_IDPIC  IN PICFILM.IDPIC%type ,
      p_IDFILM IN PICFILM.IDFILM%type DEFAULT NULL );
  -- delete
  PROCEDURE del(
      p_IDPIC IN PICFILM.IDPIC%type );
      
      
      
END PICFILM_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "PICFILM_TAPI" 
IS
  -- insert
PROCEDURE ins(    p_PIC    IN PICFILM.PIC%type DEFAULT NULL    )
IS
BEGIN
  INSERT INTO PICFILM
    ( PIC  ,IDFILM    ) VALUES ( p_PIC ,FILM_SEQ.currval    );
END;
-- update
PROCEDURE upd
  (
    p_PIC    IN PICFILM.PIC%type DEFAULT NULL ,
    p_IDPIC  IN PICFILM.IDPIC%type ,
    p_IDFILM IN PICFILM.IDFILM%type DEFAULT NULL
  )
IS
BEGIN
  UPDATE PICFILM SET PIC = p_PIC ,IDFILM = p_IDFILM WHERE IDPIC = p_IDPIC;
END;
-- del
PROCEDURE del(
    p_IDPIC IN PICFILM.IDPIC%type )
IS
BEGIN
  DELETE FROM PICFILM WHERE IDPIC = p_IDPIC;
END;
END PICFILM_tapi;
/
 CREATE OR REPLACE PACKAGE  "PK_SEARCH" AS 
        TYPE t_cursor IS REF CURSOR ; 
        Procedure open_join_cursor1 (tab in varchar , rech in varchar,io_cursor IN OUT t_cursor);

END PK_SEARCH;
/
CREATE OR REPLACE PACKAGE BODY  "PK_SEARCH" AS
   Procedure open_join_cursor1 (tab in varchar , rech in varchar,io_cursor IN OUT t_cursor) 
   IS 
        v_cursor t_cursor; 
   BEGIN 
 if  tab = 'GENRE' then
               OPEN v_cursor FOR 
               
             SELECT * from film where genre like rech;
elsif tab ='FILM' then
           OPEN v_cursor FOR 
             SELECT * from film where titre like rech;
 elsif tab ='REALISATEUR' then
         OPEN v_cursor FOR 
        select	 R.NOM_PRENOM as NOM_PRENOM, F.TITRE as NOM_FILM,	 F.ANNEREALIS as ANNEREALIS,	 F.GENRE as GENRE
      from	 FILM F,	 REALISATEUR R
      where   F.IDREALIS=R.IDREALIS   and 	 R.NOM_PRENOM like rech ;
 
        END IF;
        io_cursor := v_cursor; 
 END open_join_cursor1; 
 END PK_SEARCH;
/
 CREATE OR REPLACE PACKAGE  "REALISATEUR_TAPI" 
IS
type REALISATEUR_tapi_rec
IS
  record
  (
    DATENAISSANCE REALISATEUR.DATENAISSANCE%type ,
    PAYS REALISATEUR.PAYS%type ,
    NOM_PRENOM REALISATEUR.NOM_PRENOM%type ,
    IDREALIS REALISATEUR.IDREALIS%type );
type REALISATEUR_tapi_tab
IS
  TABLE OF REALISATEUR_tapi_rec;
  -- insert
  PROCEDURE ins(
      p_DATENAISSANCE IN REALISATEUR.DATENAISSANCE%type DEFAULT NULL ,
      p_PAYS          IN REALISATEUR.PAYS%type DEFAULT NULL ,
      p_NOM_PRENOM    IN REALISATEUR.NOM_PRENOM%type DEFAULT NULL 
      );
  -- update
  PROCEDURE upd(
      p_DATENAISSANCE IN REALISATEUR.DATENAISSANCE%type DEFAULT NULL ,
      p_PAYS          IN REALISATEUR.PAYS%type DEFAULT NULL ,
      p_NOM_PRENOM    IN REALISATEUR.NOM_PRENOM%type DEFAULT NULL ,
      p_IDREALIS      IN REALISATEUR.IDREALIS%type );
  -- delete
  PROCEDURE del(
      p_IDREALIS IN REALISATEUR.IDREALIS%type );
END REALISATEUR_tapi;
/
CREATE OR REPLACE PACKAGE BODY  "REALISATEUR_TAPI" 
IS
  -- insert
PROCEDURE ins(
    p_DATENAISSANCE IN REALISATEUR.DATENAISSANCE%type DEFAULT NULL ,
    p_PAYS          IN REALISATEUR.PAYS%type DEFAULT NULL ,
    p_NOM_PRENOM    IN REALISATEUR.NOM_PRENOM%type DEFAULT NULL 
    )
IS
BEGIN
  INSERT
  INTO REALISATEUR   (DATENAISSANCE ,PAYS ,NOM_PRENOM )
    VALUES
    ( p_DATENAISSANCE , p_PAYS , p_NOM_PRENOM );
END;
-- update
PROCEDURE upd
  (
    p_DATENAISSANCE IN REALISATEUR.DATENAISSANCE%type DEFAULT NULL ,
    p_PAYS          IN REALISATEUR.PAYS%type DEFAULT NULL ,
    p_NOM_PRENOM    IN REALISATEUR.NOM_PRENOM%type DEFAULT NULL ,
    p_IDREALIS      IN REALISATEUR.IDREALIS%type
  )
IS
BEGIN
  UPDATE REALISATEUR
  SET DATENAISSANCE = p_DATENAISSANCE ,
    PAYS            = p_PAYS ,
    NOM_PRENOM      = p_NOM_PRENOM
  WHERE IDREALIS    = p_IDREALIS;
END;
-- del
PROCEDURE del(
    p_IDREALIS IN REALISATEUR.IDREALIS%type )
IS
BEGIN
  DELETE FROM REALISATEUR WHERE IDREALIS = p_IDREALIS;
END;
END REALISATEUR_tapi;
/
 

CREATE OR REPLACE PROCEDURE  "ADD_BLOB" (p_name picfilm.pic%type) IS
  /*  v_blob  BLOB;
    v_bfile BFILE;
stmt varchar(200);
*/
v varchar2 (1000);
b varchar2 (1000);


  BEGIN
  /*
 --dbms_output.put_line(p_name);
  v:=utl_raw.cast_to_varchar2(utl_encode.base64_encode(utl_raw.cast_to_raw(p_name)));
     dbms_output.put_line(v);
 b:=utl_raw.cast_to_varchar2(utl_encode.base64_decode(utl_raw.cast_to_raw    (v)));
    
     dbms_output.put_line(b);
  
     */
 --  INSERT INTO picfilm (pic) VALUES (v);
   
INSERT INTO picfilm (pic) VALUES (p_name);
 

 
--INSERT INTO PICFILM  (PIC) VALUES (BFILENAME('Rpic',p_name ));
  END;
/
 CREATE OR REPLACE PROCEDURE  "P_FILMDETAIL" (idfilm in FILM.IDFILM%type,c_detail IN OUT t_cursor) is
declare
   TYPE t_cursor IS REF CURSOR ; 

BEGIN
  NULL;
END P_FILMDETAIL;
/
 

 CREATE SEQUENCE   "ACTER_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ACTEUR_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CLIENT_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EMPREINTE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EXEMPLAIRE_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "FILM_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 21 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PICFILM_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REALISATEUR_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/

CREATE OR REPLACE TRIGGER  "BI_ACTER" 
  before insert on ACTER               
  for each row  
begin   
    select ACTER_SEQ.nextval into :NEW.IDACTER from dual; 
end;
/
ALTER TRIGGER  "BI_ACTER" ENABLE
/

CREATE OR REPLACE TRIGGER  "BI_ACTEUR" 
  before insert on ACTEUR               
  for each row  
begin   
    select ACTEUR_SEQ.nextval into :NEW.NUMACTEUR from dual; 
end; 

/
ALTER TRIGGER  "BI_ACTEUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CLIENT" 
  before insert on CLIENT               
  for each row  
begin   
    select CLIENT_SEQ.nextval into :NEW.IDCLIENT from dual; 
end; 

/
ALTER TRIGGER  "BI_CLIENT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_EMPREINTE" 
  before insert on EMPREINTE               
  for each row  
begin   
    select EMPREINTE_SEQ.nextval into :NEW.IDPREINTE from dual; 
end; 

/
ALTER TRIGGER  "BI_EMPREINTE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_EXEMPLAIRE" 
  before insert on EXEMPLAIRE               
  for each row  
begin   
    select EXEMPLAIRE_SEQ.nextval into :NEW.IDXEMPLAIRE from dual; 
end; 

/
ALTER TRIGGER  "BI_EXEMPLAIRE" ENABLE
/

CREATE OR REPLACE TRIGGER  "BI_FILM" 
  before insert on FILM               
  for each row  
begin   
    select FILM_SEQ.nextval into :NEW.IDFILM from dual; 
end; 

/

ALTER TRIGGER  "BI_FILM" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_PICFILM" 
  before insert on PICFILM              
  for each row 
begin  
    select PICFILM_SEQ.nextval into :NEW.IDPIC from dual;
end;
/
ALTER TRIGGER  "BI_PICFILM" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_REALISATEUR" 
  before insert on REALISATEUR               
  for each row  
begin   
    select REALISATEUR_SEQ.nextval into :NEW.IDREALIS from dual; 
end; 

/
ALTER TRIGGER  "BI_REALISATEUR" ENABLE
/

